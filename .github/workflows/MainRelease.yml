name: Continuous Main Release

on:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  create-main-release:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    # Publish Windows Executable
    - name: Publish Windows Executable
      run: |
        dotnet publish -c Release -r win-x64 --self-contained true \
        -p:PublishSingleFile=true \
        -p:EnableCompressionInSingleFile=true \
        -o ./bin/Release/publish_windows-x64
        cd ./bin/Release/publish_windows-x64
        zip -r ../publish_windows.zip *
        cd ../../../

    # Publish Linux Executable
    - name: Publish Linux Executable
      run: |
        dotnet publish -c Release -r linux-x64 --self-contained true \
        -p:PublishSingleFile=true \
        -p:EnableCompressionInSingleFile=true \
        -o ./bin/Release/publish_linux-x64
        cd ./bin/Release/publish_linux-x64
        zip -r ../publish_linux.zip *
        cd ../../../

    # Get the latest release version
    - name: Get the Latest Release
      id: get_latest_release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Fetch the latest release tag
        latest_tag=$(gh release list --limit 1 --json tagName --jq '.[0].tagName' | grep -Eo '[0-9]+\.[0-9]+' || echo "0.0")

        # Output the latest release version
        echo "latest_release=$latest_tag" >> $GITHUB_ENV

    # Increment the version
    - name: Increment Version
      id: increment_version
      run: |
        current_version=${{ env.latest_release }}
        major=$(echo $current_version | cut -d. -f1)
        minor=$(echo $current_version | cut -d. -f2)
        new_version="$major.$((minor + 1))"
        echo "new_version=$new_version" >> $GITHUB_ENV

    # Create a new release with the incremented version
    - name: Create New Release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Get the current date
        DATE=$(date +'%Y%m%d')

        # Set the release title and tag name
        RELEASE_TITLE="Main Release v${{ env.new_version }}"
        TAG_NAME="release_${DATE}_v${{ env.new_version }}"

        # Create a new release
        gh release create "$TAG_NAME" \
          ./bin/Release/publish_windows.zip \
          ./bin/Release/publish_linux.zip \
          --title "$RELEASE_TITLE" \
          --notes "Automated Main build for version ${{ env.new_version }}" \
          --target main
