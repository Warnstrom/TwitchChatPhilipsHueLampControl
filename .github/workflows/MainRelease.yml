name: Continuous Main Release
on:
  push:
    branches:
      - main
permissions:
  contents: write
jobs:
  create-or-update-main-release:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '7.0.x'

    # Get the latest release to determine the next version
    - name: Get Latest Release
      id: get-latest-release
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        # Try to get the latest main release
        LATEST_RELEASE=$(gh release list --limit 1 | grep "Release_" | awk '{print $1}' || echo "")

        if [ -z "$LATEST_RELEASE" ]; then
          # If no previous release, start at 1.0.0
          echo "version=1.0.0" >> $GITHUB_OUTPUT
        else
          # Extract current version and increment
          CURRENT_VERSION=$(echo "$LATEST_RELEASE" | sed -E 's/Release_[0-9]{8}-v?//')

          # Split version into components
          MAJOR=$(echo $CURRENT_VERSION | cut -d. -f1)
          MINOR=$(echo $CURRENT_VERSION | cut -d. -f2)
          PATCH=$(echo $CURRENT_VERSION | cut -d. -f3)

          # Increment minor version for main releases
          MINOR=$((MINOR + 1))
          PATCH=0

          # Handle minor version rollover
          if [ $MINOR -ge 10 ]; then
            MINOR=0
            MAJOR=$((MAJOR + 1))
          fi

          NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}"
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
        fi

    # Generate a consistent Release tag based on current date and version
    - name: Generate Release Tag
      id: generate-tag
      run: |
        RELEASE_TAG=Release_$(date +'%Y%m%d')-v${{ steps.get-latest-release.outputs.version }}
        echo "tag=$RELEASE_TAG" >> $GITHUB_OUTPUT

    # Check if release already exists
    - name: Check Existing Release
      id: check-release
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        RELEASE_EXISTS=$(gh release list | grep "${{ steps.generate-tag.outputs.tag }}" || true)
        if [ -n "$RELEASE_EXISTS" ]; then
          echo "existing_release=true" >> $GITHUB_OUTPUT
        else
          echo "existing_release=false" >> $GITHUB_OUTPUT
        fi

    - name: Publish Windows Executable
      run: |
        dotnet publish -c Release -r win-x64 --self-contained true \
        -p:PublishSingleFile=true \
        -p:EnableCompressionInSingleFile=true \
        -p:PublishReadyToRun=true \
        -o ./bin/Release/publish_windows-x64
        cd ./bin/Release/publish_windows-x64
        zip -r ../publish_windows.zip *
        cd ../../../

    - name: Publish Linux Executable
      run: |
        dotnet publish -c Release -r linux-x64 --self-contained true \
        -p:PublishSingleFile=true \
        -p:EnableCompressionInSingleFile=true \
        -o ./bin/Release/publish_linux-x64
        cd ./bin/Release/publish_linux-x64
        zip -r ../publish_linux.zip *
        cd ../../../

    - name: Create New Release
      if: steps.check-release.outputs.existing_release == 'false'
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        gh release create ${{ steps.generate-tag.outputs.tag }} \
          ./bin/Release/publish_windows.zip \
          ./bin/Release/publish_linux.zip \
          --title "Production Release v${{ steps.get-latest-release.outputs.version }}" \
          --notes "Automated main branch production build" \
          --target main

    - name: Update Existing Main Release
      if: steps.check-release.outputs.existing_release == 'true'
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        RELEASE_TAG=${{ steps.generate-tag.outputs.tag }}
        gh release delete-asset $RELEASE_TAG publish_windows.zip || true
        gh release delete-asset $RELEASE_TAG publish_linux.zip || true
        gh release upload $RELEASE_TAG \
          ./bin/Release/publish_windows.zip \
          ./bin/Release/publish_linux.zip