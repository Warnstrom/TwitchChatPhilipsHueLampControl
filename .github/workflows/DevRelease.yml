name: Continuous Development Release
on:
  push:
    branches:
      - dev

permissions:
  contents: write

jobs:
  create-or-update-dev-release:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    # Get the latest release to determine the next version
    - name: Get Latest Release
      id: get-latest-release
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        LATEST_TAG=$(gh release list --limit 1 --json tagName --jq '.[0].tagName' || echo "v0.0.0")
        echo "latest_tag=$LATEST_TAG" >> $GITHUB_ENV

    # Increment the minor version
    - name: Increment Version
      id: increment-version
      run: |
        LATEST_TAG=${{ env.latest_tag }}
        LATEST_VERSION=${LATEST_TAG#v}

        # Extract major and minor version (assume vX.Y.Z format)
        MAJOR=$(echo $LATEST_VERSION | cut -d. -f1)
        MINOR=$(echo $LATEST_VERSION | cut -d. -f2)

        # Increment the minor version
        NEXT_MINOR=$((MINOR + 1))
        NEW_VERSION="v${MAJOR}.${NEXT_MINOR}"

        echo "new_version=$NEW_VERSION" >> $GITHUB_ENV
        echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT

    # Generate a consistent dev tag based on current date and version
    - name: Generate Dev Tag
      id: generate-tag
      run: |
        DEV_TAG=dev_$(date +'%Y%m%d')-${{ steps.increment-version.outputs.version }}
        echo "tag=$DEV_TAG" >> $GITHUB_OUTPUT

    # Check if release already exists
    - name: Check Existing Release
      id: check-release
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        RELEASE_EXISTS=$(gh release list --limit 100 | grep "${{ steps.generate-tag.outputs.tag }}" || true)
        if [ -n "$RELEASE_EXISTS" ]; then
          echo "existing_release=true" >> $GITHUB_OUTPUT
        else
          echo "existing_release=false" >> $GITHUB_OUTPUT
        fi

    - name: Publish Windows Executable
      run: |
        dotnet publish -c Release -r win-x64 --self-contained true \
        -p:PublishSingleFile=true \
        -p:EnableCompressionInSingleFile=true \
        -o ./bin/Release/publish_windows-x64
        cd ./bin/Release/publish_windows-x64
        zip -r ../publish_windows.zip *
        cd ../../../

    - name: Publish Linux Executable
      run: |
        dotnet publish -c Release -r linux-x64 --self-contained true \
        -p:PublishSingleFile=true \
        -p:EnableCompressionInSingleFile=true \
        -o ./bin/Release/publish_linux-x64
        cd ./bin/Release/publish_linux-x64
        zip -r ../publish_linux.zip *
        cd ../../../

    - name: Create New Release
      if: steps.check-release.outputs.existing_release == 'false'
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        gh release create ${{ steps.generate-tag.outputs.tag }} \
          ./bin/Release/publish_windows.zip \
          ./bin/Release/publish_linux.zip \
          --title "Development Release ${{ steps.increment-version.outputs.version }}" \
          --notes "Automated development build" \
          --target dev

    - name: Update Existing Development Release
      if: steps.check-release.outputs.existing_release == 'true'
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        RELEASE_TAG=${{ steps.generate-tag.outputs.tag }}
        gh release delete-asset $RELEASE_TAG publish_windows.zip || true
        gh release delete-asset $RELEASE_TAG publish_linux.zip || true
        gh release upload $RELEASE_TAG \
          ./bin/Release/publish_windows.zip \
          ./bin/Release/publish_linux.zip \
          --title "Development Release ${{ steps.increment-version.outputs.version }}" \
          --notes "Updated automated development build"