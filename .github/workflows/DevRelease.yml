name: Continuous Development Release

on:
  push:
    branches:
      - dev
      - main

permissions:
  contents: write

jobs:
  create-release:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    # Publish Windows Executable
    - name: Publish Windows Executable
      run: |
        dotnet publish -c Release -r win-x64 --self-contained true \
        -p:PublishSingleFile=true \
        -p:EnableCompressionInSingleFile=true \
        -o ./bin/Release/publish_windows-x64
        cd ./bin/Release/publish_windows-x64
        zip -r ../publish_windows.zip *
        cd ../../../

    # Publish Linux Executable
    - name: Publish Linux Executable
      run: |
        dotnet publish -c Release -r linux-x64 --self-contained true \
        -p:PublishSingleFile=true \
        -p:EnableCompressionInSingleFile=true \
        -o ./bin/Release/publish_linux-x64
        cd ./bin/Release/publish_linux-x64
        zip -r ../publish_linux.zip *
        cd ../../../

    # Get the latest release version based on the branch prefix
    - name: Get the Latest Release
      id: get_latest_release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Determine the prefix based on the branch
        if [[ "${{ github.ref }}" == "refs/heads/dev" ]]; then
          PREFIX="dev_"
        elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          PREFIX="release_"
        else
          echo "Unsupported branch: ${{ github.ref }}"
          exit 1
        fi

        # Fetch all release tags and filter based on the prefix
        latest_tag=$(gh release list --limit 100 --json tagName --jq -r '.[].tagName' | grep -E "^${PREFIX}[0-9]{8}_v[0-9]+\.[0-9]+" | head -n 1)

        # Default to "0.0" if no matching tag is found
        if [[ -z "$latest_tag" ]]; then
          latest_release="0.0"
        else
          # Extract the version number from the tag
          latest_release=$(echo "$latest_tag" | grep -Eo '[0-9]+\.[0-9]+')
        fi

        echo "latest_release=$latest_release" >> $GITHUB_ENV

    # Increment the version
    - name: Increment Version
      id: increment_version
      run: |
        current_version=${{ env.latest_release }}
        major=$(echo $current_version | cut -d. -f1)
        minor=$(echo $current_version | cut -d. -f2)
        new_version="$major.$((minor + 1))"
        echo "new_version=$new_version" >> $GITHUB_ENV

    # Create a new release with the incremented version
    - name: Create New Release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Determine the prefix based on the branch
        if [[ "${{ github.ref }}" == "refs/heads/dev" ]]; then
          PREFIX="dev_"
        elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          PREFIX="release_"
        fi

        # Get the current date
        DATE=$(date +'%Y%m%d')

        # Set the release title and tag name
        RELEASE_TITLE="${PREFIX^} Release v${{ env.new_version }}"
        TAG_NAME="${PREFIX}${DATE}_v${{ env.new_version }}"
        # test 3
        # Create the new release
        gh release create "$TAG_NAME" \
          ./bin/Release/publish_windows.zip \
          ./bin/Release/publish_linux.zip \
          --title "$RELEASE_TITLE" \
          --notes "Automated ${PREFIX^} build for version ${{ env.new_version }}" \
          --target "${{ github.ref }}"
